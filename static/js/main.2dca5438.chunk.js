(this["webpackJsonppynetwork.net"]=this["webpackJsonppynetwork.net"]||[]).push([[0],{79:function(e,t,n){"use strict";n.r(t);var i=n(1),r=n.n(i),s=n(9),o=n.n(s),a=n(16),c=n(25),j=n(48),b=n(115),l=n(4),d=n(119),h=n(33),x=n(128),u=n(120),m=n(121),O=n(122),p=n(125),f=n(44),g=n(124),y=n(118),w=n(123),k=n(56),v=n.n(k),I=n(60),C=n.n(I),S=n(61),L=n.n(S),N=n(126),P=n(82),T=n(127),F=n(59),E=n.n(F),B=n(58),A=n.n(B),z=n(12),_=n(8),D=n(15),M=n(14),R=n.p+"static/media/hema.a0085c91.png",Y=n(0),H=function(e){Object(D.a)(n,e);var t=Object(M.a)(n);function n(){var e;Object(z.a)(this,n);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).myphoto={display:"block","margin-top":"5%","margin-left":"auto","margin-right":"auto",width:"40%"},e.headingName={fontFamily:["Corbel"].join(","),"font-size":"1.6rem","text-align":"center"},e.bodynext1={fontFamily:["Corbel"].join(","),"font-size":"1.2rem","text-align":"justify"},e}return Object(_.a)(n,[{key:"render",value:function(){return Object(Y.jsx)("div",{children:Object(Y.jsxs)(b.a,{container:!0,children:[Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3}),Object(Y.jsxs)(b.a,{item:!0,xs:10,sm:8,md:6,lg:6,children:[Object(Y.jsx)("img",{src:R,style:this.myphoto}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.headingName,children:"Hemaramanan Sivanesan"}),Object(Y.jsxs)(f.a,{variant:"subtitle1",style:this.bodynext1,children:[Object(Y.jsx)(y.a,{}),Object(Y.jsx)("br",{}),"Hi There!",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"I am Hema, I've been a Network Engineer and Instructor for over 6+ years, and I have worked with DC, ISP and Corporate networks. Further, I have a strong passion for network automation and developing tools for simplifying network maintenance and troubleshooting.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),'I have developed a web-based tool called "',Object(Y.jsx)("b",{children:"Pynetwork"}),'", concentrated on network maintenance and troubleshooting. Further, I am working on adding more features to pynetwork.',Object(Y.jsx)("br",{})," ",Object(Y.jsx)("br",{}),"Connect me on"," ",Object(Y.jsxs)("b",{children:[Object(Y.jsx)("a",{href:"https://www.linkedin.com/in/hema/",target:"_blank",children:"LinkedIn"})," "]}),", I'm ",Object(Y.jsx)("b",{children:"#OpenToWork "})," for exciting opportunities.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"This website only reflects my thoughts and interests, does not reflect or represent my current or previous workplaces directly or indirectly.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Stay, Tuned! ",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Regs, ",Object(Y.jsx)("br",{}),"Hema"]})]}),Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3})]})})}}]),n}(r.a.Component),W=H,G=n.p+"static/media/PynetworkArch.75d76bcd.png",U=function(e){Object(D.a)(n,e);var t=Object(M.a)(n);function n(){var e;Object(z.a)(this,n);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).ArchPhoto={display:"block","margin-top":"5%","margin-left":"auto","margin-right":"auto",width:"100%"},e.heading1={fontFamily:["Corbel"].join(","),"font-size":"1.6rem","text-bold":"true"},e.heading2={fontFamily:["Corbel"].join(","),"font-size":"1.5rem"},e.bodynext1={fontFamily:["Corbel"].join(","),"font-size":"1.2rem","text-align":"justify"},e.earlyDev={margin:"22px 25% 22px"},e.iframecontainerYoutube={position:"relative",width:"100%","padding-bottom":"56.25%",height:"0"},e.iframeYoutube={position:"absolute",top:0,left:0,width:"100%",height:"100%"},e}return Object(_.a)(n,[{key:"render",value:function(){return Object(Y.jsx)("div",{children:Object(Y.jsxs)(b.a,{container:!0,children:[Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3}),Object(Y.jsxs)(b.a,{item:!0,xs:10,sm:8,md:6,lg:6,children:[Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.heading1,children:"Introduction to Pynetwork"}),Object(Y.jsxs)(f.a,{style:this.bodynext1,children:[Object(Y.jsx)(y.a,{}),Object(Y.jsx)("br",{}),"Pynetwork is an ",Object(Y.jsx)("b",{children:"#OpenSourced"})," network automation tool with Web Interface for simplifying network maintenance and troubleshooting. Currently, it supports CLI based automation (for Cisco devices), in future, I am planning to add more features with NETCONF and RESTCONF capability.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Check out the ",Object(Y.jsx)("b",{children:"Quick Setup"})," section to set up the pynetwork in your local environment.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{})]}),Object(Y.jsx)(f.a,{style:this.heading2,children:"Pynetwork Architecture"}),Object(Y.jsx)(y.a,{}),Object(Y.jsx)("img",{src:G,style:this.ArchPhoto}),Object(Y.jsxs)(f.a,{style:this.bodynext1,children:[Object(Y.jsx)("br",{}),"This is the simple architecture of pynetwork, let's look at each part in a little bit of detail. Further, watch my introduction session about pynetwork at ",Object(Y.jsx)("b",{children:" Cisco DevNet Create 2021."}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("div",{style:this.iframecontainerYoutube,children:Object(Y.jsx)("iframe",{style:this.iframeYoutube,width:"560",height:"315",src:"https://www.youtube.com/embed/cN_tu2juedQ",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:"Frontend"}),Object(Y.jsx)(y.a,{}),Object(Y.jsx)("br",{}),"The frontend is the user interacting WEB GUI interface and it is doing two main jobs.",Object(Y.jsxs)("ul",{children:[Object(Y.jsxs)("li",{children:["  ","Collect the data from the user and send it back to the backend for processing that data."," "]}),Object(Y.jsxs)("li",{children:[" ","Get the response (Processed data) from the backend and display it on the WEB GUI."]})]}),"I used React and material-UI for developing the frontend. React is a framework for developing the frontend ( developed by Facebook). further, Material-UI is prebuilt react components, so we can directly import and use it with React.",Object(Y.jsx)("br",{})," ",Object(Y.jsx)("br",{}),"For Example:-",Object(Y.jsxs)("dl",{children:[Object(Y.jsx)("dt",{children:" What needs to appear? "}),Object(Y.jsx)("dd",{children:" Typography- is the components for handling text "}),Object(Y.jsx)("dt",{children:" How does it need to appear? "}),Object(Y.jsx)("dd",{children:" Variant:'h1' - Type/size of the text is Heading1 "})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:"Backend"}),Object(Y.jsx)(y.a,{}),Object(Y.jsx)("br",{}),"I used Flask for the backend, which is getting the request from the user via the frontend and process that responds then send back that processed data to the frontend. The frontend will display the data to the user according to the frontend design.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:"Netmiko "}),Object(Y.jsx)("br",{}),'It\u2019s a python library for interacting with network devices. For example, if I need to get the output of the "show version | in uptime" command on a device, So I can use the function called "send_commands" to interact with the device with show commands. likewise, it contains a separate function for configuring the devices.',Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:"Sqlalchemy and Sqlite3 "}),Object(Y.jsx)("br",{}),'It\'s an ORM (Object-relational mapper) library and it can interact with the Database without any SQL queries and the Sqlite3 is the database we are using. For example, if I need to get one-row data, I need to use the "filter_by" function with some arguments instead of SQL Query like "SELECT * FROM <TableName> WHERE <Condition>". It was very easy to interact with the database with SQLALhemy and I am sharing this from my experience.']})]}),Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3})]})})}}]),n}(r.a.Component),Q=U,V=function(e){Object(D.a)(n,e);var t=Object(M.a)(n);function n(){var e;Object(z.a)(this,n);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).heading1={fontFamily:["Corbel"].join(","),"font-size":"1.6rem","text-bold":"true"},e.heading2={fontFamily:["Corbel"].join(","),"font-size":"1.5rem"},e.bodynext1={fontFamily:["Corbel"].join(","),"font-size":"1.2rem","text-align":"justify"},e.iframecontainerYoutube={position:"relative",width:"100%","padding-bottom":"56.25%",height:"0"},e.iframeYoutube={position:"absolute",top:0,left:0,width:"100%",height:"100%"},e}return Object(_.a)(n,[{key:"render",value:function(){return Object(Y.jsx)("div",{children:Object(Y.jsxs)(b.a,{container:!0,children:[Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3}),Object(Y.jsxs)(b.a,{item:!0,xs:10,sm:8,md:6,lg:6,children:[Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.heading1,children:"Inventory Management"}),Object(Y.jsx)(y.a,{}),Object(Y.jsxs)(f.a,{style:this.bodynext1,children:[Object(Y.jsx)("br",{}),"Inventory is managing the IP address and credentials of the network devices, That information will be used by pynetwork to interact with the device and perform operational tasks such as sending show commands or config commands.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"In this section, we need to look at the two API flows that listed below.",Object(Y.jsxs)("ul",{children:[Object(Y.jsxs)("li",{children:[" ","GET all the device records from the pynetwork database."]}),Object(Y.jsxs)("li",{children:[" ","Managing the credentials database with pynetwork by DELETE / UPDATE / CREATE operations."]})]}),"Mentioned APIs are working on the backend, and the frontend is utilizing it according to the user inputs.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Check the demo and get an understanding of the inventory feature and the APIs flows.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("div",{style:this.iframecontainerYoutube,children:Object(Y.jsx)("iframe",{style:this.iframeYoutube,width:"560",height:"315",src:"https://www.youtube.com/embed/CgQ_LJyrYlo",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{})]})]}),Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3})]})})}}]),n}(r.a.Component),q=V,X=n.p+"static/media/SHowCLI.3e22eb43.png",J=n.p+"static/media/ConfigCli.11c021a1.png",K=function(e){Object(D.a)(n,e);var t=Object(M.a)(n);function n(){var e;Object(z.a)(this,n);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).heading1={fontFamily:["Corbel"].join(","),"font-size":"1.6rem","text-bold":"true"},e.heading2={fontFamily:["Corbel"].join(","),"font-size":"1.5rem"},e.bodynext1={fontFamily:["Corbel"].join(","),"font-size":"1.2rem","text-align":"justify"},e.iframecontainerYoutube={position:"relative",width:"100%","padding-bottom":"56.25%",height:"0"},e.iframeYoutube={position:"absolute",top:0,left:0,width:"100%",height:"100%"},e.SHowCLI={display:"block","margin-left":"auto","margin-right":"auto",width:"100%"},e.ConfigCli={display:"block","margin-left":"auto","margin-right":"auto",width:"100%"},e}return Object(_.a)(n,[{key:"render",value:function(){return Object(Y.jsx)("div",{children:Object(Y.jsxs)(b.a,{container:!0,children:[Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3}),Object(Y.jsxs)(b.a,{item:!0,xs:10,sm:8,md:6,lg:6,children:[Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.heading1,children:"Web based CLI"}),Object(Y.jsx)(y.a,{}),Object(Y.jsxs)(f.a,{style:this.bodynext1,children:[Object(Y.jsx)("br",{}),"This section will cover the WEB CLI feature of pynetwork. Web CLI allows you to perform the commands-execution on the network devices that have already been added with the pynetwork database. It is providing a web-based CLI console to manage your network. Also, you can execute the same command on multiple devices at the same time.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),'There are two types of WEB CLI is available in pynetwork, those are "Show CLI" and another "Config CLI".',Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" Show CLI - Execute show commands on multiple nodes."}),Object(Y.jsxs)("li",{children:[" ","Config CLI - Execute config commands on multiple nodes."]})]}),Object(Y.jsx)("b",{children:" Show CLI "}),Object(Y.jsx)("br",{}),"This feature allows running multiple show commands on one or more nodes on the pynetwork. In this example, we could able to execute two commands (",Object(Y.jsx)("b",{children:'"show version | in uptime"'})," & ",Object(Y.jsx)("b",{children:'"show ip interface brief | in up"'})," ) parallelly on two switches (",Object(Y.jsx)("b",{children:'"192.168.200.101" '})," & ",Object(Y.jsx)("b",{children:'"192.168.200.102"'}),").",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("img",{src:X,style:this.SHowCLI}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:" Config CLI "}),Object(Y.jsx)("br",{}),"This feature allows to execute configurations on one or more nodes on the pynetwork. In this example, we could able to apply set of configurations (",Object(Y.jsx)("b",{children:'"ip name-server 10.25.10.5"'})," & ",Object(Y.jsx)("b",{children:'"ip name-server 10.25.10.6"'})," ) parallelly on two switches (",Object(Y.jsx)("b",{children:'"192.168.200.101" '})," & ",Object(Y.jsx)("b",{children:'"192.168.200.102"'}),").",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("img",{src:J,style:this.ConfigCli})]})]}),Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3})]})})}}]),n}(r.a.Component),Z=K,$=n.p+"static/media/CreateBackup.9d7ff32f.png",ee=n.p+"static/media/DeleteBackup.d3b65680.png",te=n.p+"static/media/ExportBackup.c5857fa9.png",ne=function(e){Object(D.a)(n,e);var t=Object(M.a)(n);function n(){var e;Object(z.a)(this,n);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).CreateBackup={display:"block","margin-left":"auto","margin-right":"auto",width:"100%"},e.DeleteBackup={display:"block","margin-left":"auto","margin-right":"auto",width:"100%"},e.ExportBackup={display:"block","margin-left":"auto","margin-right":"auto",width:"100%"},e.heading1={fontFamily:["Corbel"].join(","),"font-size":"1.6rem","text-bold":"true"},e.heading2={fontFamily:["Corbel"].join(","),"font-size":"1.5rem"},e.bodynext1={fontFamily:["Corbel"].join(","),"font-size":"1.2rem","text-align":"justify"},e.iframecontainerYoutube={position:"relative",width:"100%","padding-bottom":"56.25%",height:"0"},e.iframeYoutube={position:"absolute",top:0,left:0,width:"100%",height:"100%"},e}return Object(_.a)(n,[{key:"render",value:function(){return Object(Y.jsx)("div",{children:Object(Y.jsxs)(b.a,{container:!0,children:[Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3}),Object(Y.jsxs)(b.a,{item:!0,xs:10,sm:8,md:6,lg:6,children:[Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.heading1,children:"Configuration and Backup Management"}),Object(Y.jsx)(y.a,{}),Object(Y.jsxs)(f.a,{style:this.bodynext1,children:[Object(Y.jsx)("br",{}),"This feature is managing the backup of the running-config of devices. We can Backup multiple node running configurations at once. Also, we can delete the unwanted backup from the database and keep the latest backup. further, we can export a set of config files from pynetwork in ZIP format.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:" Create Backup "}),Object(Y.jsx)("br",{}),"This feature allows to backup the running configuration of one or more nodes on the pynetwork. In this example, we did backup the running configurations parallelly on two switches. (",Object(Y.jsx)("b",{children:'"192.168.200.101" '})," & ",Object(Y.jsx)("b",{children:'"192.168.200.102"'}),").",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("img",{src:$,style:this.CreateBackup}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:" Delete Backup "}),Object(Y.jsx)("br",{}),"The config backup will be stored inside the pynetwork, This feature allows to delete the unwanted/outdated configs from pynetwork.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("img",{src:ee,style:this.DeleteBackup}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:" Export Backup "}),Object(Y.jsx)("br",{}),"This feature allows to export a set of configuration backup files from pynetwork in ZIP format.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("img",{src:te,style:this.ExportBackup}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{})]})]}),Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3})]})})}}]),n}(r.a.Component),ie=ne,re=(r.a.Component,function(e){Object(D.a)(n,e);var t=Object(M.a)(n);function n(){var e;Object(z.a)(this,n);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).ArchPhoto={display:"block","margin-top":"5%","margin-left":"auto","margin-right":"auto",width:"100%"},e.heading1={fontFamily:["Corbel"].join(","),"font-size":"1.6rem","text-bold":"true"},e.heading2={fontFamily:["Corbel"].join(","),"font-size":"1.5rem"},e.bodynext1={fontFamily:["Corbel"].join(","),"font-size":"1.2rem","text-align":"justify"},e.earlyDev={margin:"22px 25% 22px"},e}return Object(_.a)(n,[{key:"render",value:function(){return Object(Y.jsx)("div",{children:Object(Y.jsxs)(b.a,{container:!0,children:[Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3}),Object(Y.jsxs)(b.a,{item:!0,xs:10,sm:8,md:6,lg:6,children:[Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.heading1,children:"Hemaramanan Sivanesan - NetDevOps Engineer"}),Object(Y.jsxs)(f.a,{style:this.bodynext1,children:[Object(Y.jsx)(y.a,{}),Object(Y.jsx)("br",{}),"I am a Network Engineer, I love Networking, Designing and Solving Complex Problems. Further, I build Software Tools to Simplify Network Maintenance.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{})]}),Object(Y.jsxs)(f.a,{style:this.heading1,noWrap:!0,children:[Object(Y.jsx)("i",{children:" Just added few projects, not up-to-date info. "}),Object(Y.jsx)(y.a,{})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.bodynext1,children:Object(Y.jsxs)("ol",{children:[Object(Y.jsx)("li",{children:Object(Y.jsx)("b",{children:"Pynetwork - Web-Based Network Automation Tool."})}),Object(Y.jsx)("br",{}),"Pynetwork is an open-source project that I developed and, Currently, It can run/push a list of show commands/configs on multiple devices (Cisco) via SSH. Further, It can manage the running configs backups of the device.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Technologies/Products Involvement.",Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" React and Material-UI - Frontend."}),Object(Y.jsx)("li",{children:" Flask - Backend."}),Object(Y.jsx)("li",{children:" Sqlite3 - Database."}),Object(Y.jsx)("li",{children:" Netmiko - To Interact with Network Devices.."})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)("li",{children:Object(Y.jsx)("b",{children:"Network Audit Tool."})}),Object(Y.jsx)("br",{}),"I have developed network audit tools to analyse multiple functionalities, such as Node / Link redundancy, L3VPN / L2VPN, QoS, and specific config templates. To achieve this, I developed various Python modules to identity each service and functionality from running-config of each device in the network. Finally, I generated one excel report by combining all modules and those findings.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Technologies/Products Involvement.",Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" Python"}),Object(Y.jsx)("li",{children:" Data Structures and Algorithms"})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)("li",{children:Object(Y.jsx)("b",{children:"MPLS Based Netflow with ELK Stack. "})}),Object(Y.jsx)("br",{}),'This project was designed to collect the MPLS Label-based NetFlow from the network and visualize/analyse it with the "ELK" stack. I had to do some modifications on the Logstach backend to identify the label-based Netflow. Also, extend the with Grafana.',Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Technologies/Products Involvement.",Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" Docker"}),Object(Y.jsx)("li",{children:" Elasticsearch"}),Object(Y.jsx)("li",{children:" Logstash"}),Object(Y.jsx)("li",{children:" Kibana"}),Object(Y.jsx)("li",{children:" Grafana"})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)("li",{children:Object(Y.jsx)("b",{children:"Cisco NSO Deployment"})}),Object(Y.jsx)("br",{}),"I deployed Cisco NSO and create multiple service templates such as L2VPN/L3VPN with YANG Model. Further, I Used REST APIs to automate the NSO / Service Provisioning and used NETCONF for the South-Bound interface.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Technologies/Products Involvement.",Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" Python"}),Object(Y.jsx)("li",{children:" REST API"}),Object(Y.jsx)("li",{children:" NETCONF"}),Object(Y.jsx)("li",{children:" YANG"})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)("li",{children:Object(Y.jsx)("b",{children:"LNS Migration"})}),Object(Y.jsx)("br",{}),"In this project, I had to convert the IOS-XE configurations to IOS-XR configuration for migrating new LNS based on IOS-XR. I wrote python codes to achieve this.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Technologies/Products Involvement.",Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" Python"}),Object(Y.jsx)("li",{children:" YAML"})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)("li",{children:Object(Y.jsx)("b",{children:"Datacenter Deployment"})}),Object(Y.jsx)("br",{}),"I Involved in this project, from requirement collection to NRFU tests. I was part of the HLD, LLD and deployment of the project. Further, I prepared the entire NRFU document.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Technologies/Products Involvement.",Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" VXLAN and EVPN"}),Object(Y.jsx)("li",{children:" ISIS, BGP"}),Object(Y.jsx)("li",{children:" Multicast, PIM, Anycast Gateway"}),Object(Y.jsx)("li",{children:" VPC, VLAN, TRUNK, MCLAG , STP"}),Object(Y.jsx)("li",{children:" Cisco Nexus Switches"})]}),Object(Y.jsx)("br",{}),Object(Y.jsx)("li",{children:Object(Y.jsx)("b",{children:"Esxi based Network Lab"})}),Object(Y.jsx)("br",{}),"I did set up a Network Test-Lab environment with ESXI. It had used to design and simulate the network before providing solutions or deploying to the customer or production environment. Further, I set up the free secured remote desktop capacity for multiple users to access the Lab simultaneously.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Technologies/Products Involvement.",Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" VMware Esxi"}),Object(Y.jsx)("li",{children:" Ubuntu"}),Object(Y.jsx)("li",{children:" HP Blade / Rack server"})]})]})})]}),Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3})]})})}}]),n}(r.a.Component)),se=re,oe=(r.a.Component,n(57)),ae=n.n(oe),ce=n.p+"static/media/PynetworkURL.6ae68d78.png",je=function(e){Object(D.a)(n,e);var t=Object(M.a)(n);function n(){var e;Object(z.a)(this,n);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).heading1={fontFamily:["Corbel"].join(","),"font-size":"1.6rem","text-bold":"true"},e.PynetworkURL={display:"block","margin-left":"auto","margin-right":"auto",width:"100%"},e.preCode={fontFamily:"monospace","font-size":"1rem","background-color":"#dbd6d6"},e.heading2={fontFamily:["Corbel"].join(","),"font-size":"1.5rem"},e.bodynext1={fontFamily:["Corbel"].join(","),"font-size":"1.2rem","text-align":"justify"},e.iframecontainerYoutube={position:"relative",width:"100%","padding-bottom":"56.25%",height:"0"},e.iframeYoutube={position:"absolute",top:0,left:0,width:"100%",height:"100%"},e}return Object(_.a)(n,[{key:"render",value:function(){return Object(Y.jsx)("div",{children:Object(Y.jsxs)(b.a,{container:!0,children:[Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3}),Object(Y.jsxs)(b.a,{item:!0,xs:10,sm:8,md:6,lg:6,children:[Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)(f.a,{style:this.heading1,children:"Quick Setup Guide"}),Object(Y.jsx)(y.a,{}),Object(Y.jsxs)(f.a,{style:this.bodynext1,children:[Object(Y.jsx)("br",{}),"This tutorial will cover the steps that need to run the pynetwork on your docker environment. I'm using Linux as a host machine to spine-up the containers.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"I have dockerized the pynetwork and hosted it on the Docker public registry (https://hub.docker.com/) as two images. So, We have to use those two images to run the pynetwork services.",Object(Y.jsx)("br",{}),Object(Y.jsxs)("ul",{children:[Object(Y.jsx)("li",{children:" hemaramanan/pynetwork_backend - It will cover the backend "}),Object(Y.jsx)("li",{children:"hemaramanan/pynetwork_frontend -It will cover the frontend "})]}),"I'm going to use the docker-compose to spine-up these images (containers) and provision the service. It will be easy to manage the pynetwork as a service rather than individually handle relevant containers to up and run the pynetwork.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),"Follow the instruction below to run the pynetwork in your local environment.",Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:"Step: 1"}),Object(Y.jsx)("br",{}),"Create the ",Object(Y.jsxs)("b",{children:[Object(Y.jsx)("i",{children:" docker-compose.yml "})," "]}),"file with the below-mentioned properties.",Object(Y.jsx)("pre",{style:this.preCode,children:'\n  version: "3.9"\n  services:\n    pynetwork:\n      image: hemaramanan/pynetwork_backend\n      volumes:\n        - /app/pynetwork/data/\n      ports:\n        - "5000:5000"\n    pynetwork_ui:\n      image: hemaramanan/pynetwork_frontend\n      ports:\n        - "8080:80"\n      depends_on:\n        - pynetwork\n\n'}),Object(Y.jsx)("b",{children:"Step: 2"}),Object(Y.jsx)("br",{}),"Navigate to the particular folder which contained the ",Object(Y.jsx)("b",{children:Object(Y.jsx)("i",{children:"docker-compose.yml"})})," file and run the ",Object(Y.jsx)("b",{children:Object(Y.jsx)("i",{children:"docker-compose up "})})," command. while you enter that command, you may get some console output mentioned below.",Object(Y.jsx)("pre",{style:this.preCode,children:'\n  root@ubs:/home/dev/pynetwork/test# ls\n  docker-compose.yml\n  root@ubs:/home/dev/pynetwork/test# \n  root@ubs:/home/dev/pynetwork/test# docker-compose up\n  Creating network "test_default" with the default driver\n  Creating test_pynetwork_1 ... done\n  Creating test_pynetwork_ui_1 ... done\n  Attaching to test_pynetwork_1, test_pynetwork_ui_1\n\n'}),"Congratulations, you have successfully deployed the pynetwork on your local environment. Let's have fun with pynetwork!",Object(Y.jsx)("br",{})," ",Object(Y.jsx)("br",{}),Object(Y.jsx)("b",{children:"Step: 3"}),Object(Y.jsx)("br",{}),"Access the pynetwork on your web browser by using the IP address of the host machine with port 8080. In my example, it is ",Object(Y.jsx)("b",{children:Object(Y.jsx)("i",{children:"http://192.168.100.100:8080/ "})}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{}),Object(Y.jsx)("img",{src:ce,style:this.PynetworkURL}),Object(Y.jsx)("br",{}),Object(Y.jsx)("br",{})]})]}),Object(Y.jsx)(b.a,{item:!0,xs:1,sm:2,md:3,lg:3})]})})}}]),n}(r.a.Component),be=je,le=200,de=Object(d.a)((function(e){return{root:{display:"flex"},ButtonText:{fontFamily:["Corbel"].join(","),"font-size":"1.2rem"},toolbarButtons:{marginLeft:"auto",display:"block"},ButtonGroupStyle:{marginRight:10},appBar:{transition:e.transitions.create(["margin","width"],{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen})},appBarShift:{width:"calc(100% - ".concat(le,"px)"),marginLeft:le,transition:e.transitions.create(["margin","width"],{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.enteringScreen})},menuButton:{marginRight:e.spacing(1)},hide:{display:"none"},drawer:{width:le,flexShrink:0},drawerPaper:{width:le},drawerHeader:Object(j.a)(Object(j.a)({display:"flex",alignItems:"center",padding:e.spacing(0,1)},e.mixins.toolbar),{},{justifyContent:"flex-end"}),content:{flexGrow:1,padding:e.spacing(1),transition:e.transitions.create("margin",{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen}),marginLeft:-200},contentShift:{transition:e.transitions.create("margin",{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.enteringScreen}),marginLeft:0}}}));function he(){var e=de(),t=Object(h.a)(),n=r.a.useState(!0),i=Object(c.a)(n,2),s=i[0],o=i[1],j=r.a.useState(1),d=Object(c.a)(j,2),k=d[0],I=d[1],S=r.a.useState(Object(Y.jsx)(Q,{})),F=Object(c.a)(S,2),B=F[0],z=F[1],_=function(e,t){I(t),function(e){console.log(e),"About Me"===e&&z(Object(Y.jsx)(W,{})),"pynetwork Intro"===e&&z(Object(Y.jsx)(Q,{})),"Inventory"===e&&z(Object(Y.jsx)(q,{})),"WEB CLI"===e&&z(Object(Y.jsx)(Z,{})),"Config Management"===e&&z(Object(Y.jsx)(ie,{})),"Resume"===e&&z(Object(Y.jsx)(se,{})),"Quick Setup"===e&&z(Object(Y.jsx)(be,{}))}(t)};return Object(Y.jsxs)("div",{className:e.root,children:[Object(Y.jsx)(u.a,{}),Object(Y.jsx)(m.a,{position:"fixed",className:Object(l.a)(e.appBar,Object(a.a)({},e.appBarShift,s)),children:Object(Y.jsxs)(O.a,{children:[Object(Y.jsx)(w.a,{color:"inherit","aria-label":"open drawer",onClick:function(){o(!0)},edge:"start",className:Object(l.a)(e.menuButton,s&&e.hide),children:Object(Y.jsx)(v.a,{})}),Object(Y.jsx)(g.a,{children:Object(Y.jsx)(P.a,{variant:"contained",onClick:function(e){return _(0,"About Me")},style:{"font-size":"0.8rem"},children:"Myself"})}),Object(Y.jsx)(f.a,{variant:"h6",noWrap:!0,align:"center"}),Object(Y.jsxs)("div",{className:e.toolbarButtons,children:[Object(Y.jsx)(w.a,{color:"inherit",href:"https://pynetwork.net/",target:"_blank",children:Object(Y.jsx)(ae.a,{})}),Object(Y.jsx)(w.a,{color:"inherit",href:"https://github.com/hemaramanan/",target:"_blank",children:Object(Y.jsx)(A.a,{})}),Object(Y.jsx)(w.a,{color:"inherit",href:"https://www.linkedin.com/in/hema/",target:"_blank",children:Object(Y.jsx)(E.a,{})})]})]})}),Object(Y.jsxs)(x.a,{className:e.drawer,variant:"persistent",anchor:"left",open:s,classes:{paper:e.drawerPaper},children:[Object(Y.jsx)("div",{className:e.drawerHeader,children:Object(Y.jsx)(w.a,{onClick:function(){o(!1)},children:"ltr"===t.direction?Object(Y.jsx)(C.a,{}):Object(Y.jsx)(L.a,{})})}),Object(Y.jsx)(y.a,{}),Object(Y.jsxs)(p.a,{children:[["PYnetwork Doc"].map((function(e){return Object(Y.jsx)(N.a,{multiline:!0,children:Object(Y.jsx)(T.a,{primary:e})},e)})),Object(Y.jsx)(p.a,{children:["pynetwork Intro","Quick Setup","Inventory","WEB CLI","Config Management"].map((function(e,t){return Object(Y.jsx)(N.a,{button:!0,selected:k===e,onClick:function(t){return _(0,e)},children:Object(Y.jsx)(T.a,{secondary:e})},e)}))})]}),Object(Y.jsx)(y.a,{})]}),Object(Y.jsxs)("main",{className:Object(l.a)(e.content,Object(a.a)({},e.contentShift,s)),children:[Object(Y.jsx)("div",{className:e.drawerHeader}),Object(Y.jsx)(b.a,{container:!0,children:Object(Y.jsx)(b.a,{item:!0,children:B})})]})]})}o.a.render(Object(Y.jsx)(r.a.StrictMode,{children:Object(Y.jsx)(he,{})}),document.getElementById("root"))}},[[79,1,2]]]);
//# sourceMappingURL=main.2dca5438.chunk.js.map